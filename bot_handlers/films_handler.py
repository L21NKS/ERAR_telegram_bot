from dotenv import load_dotenv
import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from telebot import types
from bot_variables.const import user_states, menu_texts,var_labels
from bot_func.bot_utils import safe_send,pluralize_ru
from bot_func.db_func import delete_film_by_number,get_user_rated_films
from bot_variables.bot_instance import bot


load_dotenv()
api_key = os.getenv("KEY")


def show_rating_film_options(message):
    chat_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É"),
        types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É"),
        types.KeyboardButton("–ù–∞–∑–∞–¥")
    )
    safe_send(chat_id, "–í–∞—à–∏ –æ—Ü–µ–Ω—ë–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:", reply_markup=markup)

    films = get_user_rated_films(chat_id)

    if not films:
        safe_send(chat_id, "‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤")
        return

    response = ""
    for i, (_, name, score) in enumerate(films, 1):
        response += f"{i}. {name} ‚Äî {score}\n"

    safe_send(chat_id, response)

def ask_rating_number_to_delete(message):
    chat_id = message.chat.id
    films = get_user_rated_films(chat_id)

    if not films:
        safe_send(chat_id, "‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤")
        return  

    user_states[chat_id] = {'action': 'delete_film'}
    response = "üé¨ –í–∞—à–∏ –æ—Ü–µ–Ω—ë–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:\n"
    for i, (_, name, score) in enumerate(films, 1):
        response += f"{i}. {name} ‚Äî {score}/10\n"

    safe_send(chat_id, response)
    safe_send(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")

    def wrapper(msg):
        if msg.text.strip() in menu_texts:
            user_states.pop(chat_id, None)
            return

        try:
            number = int(msg.text.strip())
            deleted_film = delete_film_by_number(msg.from_user.id, number)
            if deleted_film:
                safe_send(chat_id, f"‚úÖ –§–∏–ª—å–º ¬´{deleted_film}¬ª –±—ã–ª —É–¥–∞–ª—ë–Ω.")
            else:
                safe_send(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞")
        except ValueError:
            safe_send(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        user_states.pop(chat_id, None)

    bot.register_next_step_handler(message, wrapper)

def ask_rating_number_to_edit(message):
    chat_id = message.chat.id
    films = get_user_rated_films(chat_id)

    if not films:
        safe_send(chat_id, "‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤")
        return

    response = "üé¨ –í–∞—à–∏ –æ—Ü–µ–Ω—ë–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:\n"
    for i, (_, name, score) in enumerate(films, 1):
        response += f"{i}. {name} ‚Äî {score}\n"

    safe_send(chat_id, response)
    safe_send(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞, –æ—Ü–µ–Ω–∫—É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")

    user_states[chat_id] = {'action': 'edit_film_select'}

    def wrapper(msg):
        try:
            number = int(msg.text.strip())
            if not (1 <= number <= len(films)):
                raise ValueError
            film_name = films[number - 1][1]
            user_states[chat_id] = {
                'step': 0,
                'scores': [],
                'film_name': film_name,
                'action': 'edit_film'
            }

            safe_send(chat_id, f"‚úèÔ∏è –ò–∑–º–µ–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É —Ñ–∏–ª—å–º–∞ ¬´{film_name}¬ª")
            safe_send(chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –∑–∞ {var_labels[0]}:")

        except ValueError:
            safe_send(chat_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞")
            user_states.pop(chat_id, None)

    bot.register_next_step_handler(message, wrapper)

def process_film_name_for_deletion(message):
    chat_id = message.chat.id
    film_name = message.text.strip()

    menu_texts

    if film_name in menu_texts:
        user_states.pop(chat_id, None)
        return  

    success = delete_film_by_number(chat_id, film_name)
    if success:
        safe_send(chat_id, f"–û—Ü–µ–Ω–∫–∞ —Ñ–∏–ª—å–º–∞ '{film_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    user_states.pop(chat_id, None)

def show_rating(message):
    from bot_func.db_func import get_top_rated_films
    top_films = get_top_rated_films()

    if not top_films:
        safe_send(message.chat.id, "‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞")
        return

    response = "üèÜ –¢–æ–ø-10 —Ñ–∏–ª—å–º–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–µ:\n\n"
    for i, (film, avg_score, count) in enumerate(top_films, 1):
        form = pluralize_ru(count)
        response += f"{i}. {film} ‚Äî {avg_score}  ({count} {form})\n"


    safe_send(message.chat.id, response)